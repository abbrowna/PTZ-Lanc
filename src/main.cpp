/* 
  Sketch generated by the Arduino IoT Cloud Thing "Camera 1"
  https://create.arduino.cc/cloud/things/96c3dee3-4f88-43b8-80a5-e9788d281373 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

 

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

int camera_command;
bool down_arrow;
bool left_arrow;
bool right_arrow;
bool up_arrow = false;

#include <WiFiNINA.h>
#include "lancCommands.h"
#include "index_html.h"

/* define pin numbers for Lanc and stepper motors */
#define cmdPin 9 
#define lancPin 5
#define panEnablePin 12
#define panDirPin 11
#define panStepPin 10
#define tiltEnablePin 4
#define tiltDirPin 2
#define tiltStepPin 3

const char* ssid = "MOTHAK IOT";
const char* password = "6Y6ADQM434H";

WiFiServer server(80);

const double speedRatio = 0.54901960784;
int bitDuration = 104; // Duration of one LANC bit in microseconds

unsigned long lastpan = 0;
unsigned long motor_timeout = 5000; //milliseconds before the motor times out and is disabled
bool timeout_flag = 0;

int wb_k = 34; //5400
int exp_f = 8; //3.7
int exp_s = 3; //1/50
int exp_g = 17; //17

enum CameraCommands {
    ZOOM_1 = 1,
    ZOOM_2 = 2,
    ZOOM_3 = 3,
    ZOOM_4 = 4,
    ZOOM_5 = 5,
    ZOOM_6 = 6,
    ZOOM_7 = 7,
    FOCUS = 8,
    WB_K = 9,
    EXP_F = 10, 
    EXP_S = 11,
    EXP_GAIN = 12,
    PAN_TILT_FAST= 13,
    PAN_TILT_MEDIUM = 14,
    PAN_TILT_SLOW = 15,
    PAN_TILIT_TICK = 16,
};

void sendByte(uint8_t dataByte) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(cmdPin, (dataByte >> i) & 1);
    delayMicroseconds(bitDuration);
  }
  digitalWrite(cmdPin, LOW);
}

// Function to send a full LANC command
void lancCommand(const LancCommand &command) {
  for (int i = 0; i < 5; i++) {
    while (pulseIn(lancPin, HIGH) < 5000);
    delayMicroseconds(bitDuration);
    sendByte(command.byte0);
    digitalWrite(cmdPin, LOW);
    while (digitalRead(lancPin));
    delayMicroseconds(bitDuration);
    sendByte(command.byte1);
    digitalWrite(cmdPin, LOW);
  }
}

// Function to send a sequence of Lanc commands i.e. a Macro
void lancMacro(const LancCommand* commands, size_t length) {
    for (size_t j = 0; j < length; j++) {
        for (int i = 0; i < 5; i++) {
            while (pulseIn(lancPin, HIGH) < 5000);
            delayMicroseconds(bitDuration);
            sendByte(commands[j].byte0);
            while (digitalRead(lancPin));
            delayMicroseconds(bitDuration);
            sendByte(commands[j].byte1);
        }
        delay(100);
    }
}

// Stepper motor control function
void moveStepper(int enablePin, int dirPin, int stepPin, bool direction, int speed) {
  digitalWrite(enablePin, LOW);
  timeout_flag = 0;
  digitalWrite(dirPin, direction);
  digitalWrite(stepPin, HIGH);
  if(enablePin == tiltEnablePin){
    delayMicroseconds(20000/(speedRatio*speed));
  }
  else{
    delayMicroseconds(20000/speed);
  }
  digitalWrite(stepPin, LOW);
  delayMicroseconds(2);
  lastpan = millis();
}

void handleRoot(WiFiClient client) {
  client.println("HTTP/1.1 200 OK");
  client.println("Content-type:text/html");
  client.println();
  client.print(index_html_part1);
  client.print(index_html_part2);
  client.print(index_html_part3);
  client.print(index_html_part4);
}

void handleCommand(WiFiClient client, String request) {
  Serial.println("Handling command...");
  Serial.print("Request: ");
  Serial.println(request);

  // Read the request body
  String body = "";
  while (client.available()) {
    char c = client.read();
    body += c;
  }
  Serial.print("Body: ");
  Serial.println(body);

  int jsonStart = body.indexOf('{');
  int jsonEnd = body.indexOf('}');
  if (jsonStart >= 0 && jsonEnd >= 0) {
    String json = body.substring(jsonStart, jsonEnd + 1);
    Serial.print("JSON: ");
    Serial.println(json);

    bool state = json.indexOf("\"state\":true") >= 0;

    if (json.indexOf("\"direction\":\"up\"") >= 0) {
      up_arrow = state;
      Serial.println("Up arrow state changed");
      Serial.print("up_arrow: ");
      Serial.println(up_arrow);
    } else if (json.indexOf("\"direction\":\"down\"") >= 0) {
      down_arrow = state;
      Serial.println("Down arrow state changed");
      Serial.print("down_arrow: ");
      Serial.println(down_arrow);
    } else if (json.indexOf("\"direction\":\"left\"") >= 0) {
      left_arrow = state;
      Serial.println("Left arrow state changed");
      Serial.print("left_arrow: ");
      Serial.println(left_arrow);
    } else if (json.indexOf("\"direction\":\"right\"") >= 0) {
      right_arrow = state;
      Serial.println("Right arrow state changed");
      Serial.print("right_arrow: ");
      Serial.println(right_arrow);
    }
  }
  client.println("HTTP/1.1 200 OK");
  client.println("Content-type:application/json");
  client.println();
  client.println("{\"status\":\"ok\"}");
}

// Update the handleCameraCommand function to properly parse the camera_command value
void handleCameraCommand(WiFiClient client, String request) {
  Serial.println("Handling camera command...");
  Serial.print("Request: ");
  Serial.println(request);

  // Read the request body
  String body = "";
  while (client.available()) {
    char c = client.read();
    body += c;
  }
  Serial.print("Body: ");
  Serial.println(body);

  int jsonStart = body.indexOf('{');
  int jsonEnd = body.indexOf('}');
  if (jsonStart >= 0 && jsonEnd >= 0) {
    String json = body.substring(jsonStart, jsonEnd + 1);
    Serial.print("JSON: ");
    Serial.println(json);

    int commandStart = json.indexOf("\"camera_command\":\"") + 18;
    int commandEnd = json.indexOf('\"', commandStart);
    if (commandStart >= 0 && commandEnd >= 0) {
      String commandStr = json.substring(commandStart, commandEnd);
      camera_command = commandStr.toInt();
      Serial.println("Camera command received");
      Serial.print("camera_command: ");
      Serial.println(camera_command);
    }
  }
  client.println("HTTP/1.1 200 OK");
  client.println("Content-type:application/json");
  client.println();
  client.println("{\"status\":\"ok\"}");
}

void handleStatus(WiFiClient client) {
  String json = "{\"wb_k\":" + String(wb_k) + ",\"exp_f\":" + String(exp_f) + ",\"exp_s\":" + String(exp_s) + ",\"exp_g\":" + String(exp_g) + "}";
  client.println("HTTP/1.1 200 OK");
  client.println("Content-type:application/json");
  client.println();
  client.println(json);
}

void reconnectWiFi() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi disconnected. Attempting to reconnect...");
    WiFi.disconnect();
    WiFi.begin(ssid, password);

    unsigned long startAttemptTime = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) { // 10-second timeout
      delay(500);
      Serial.print(".");
    }

    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nReconnected to WiFi.");
      Serial.print("IP Address: ");
      Serial.println(WiFi.localIP());
    } else {
      Serial.println("\nFailed to reconnect to WiFi.");
    }
  }
}

void initializeCamera() {
  Serial.println("Starting camera initialization...");
  Serial.println("Starting exposure F Initialization");
  lancMacro(Exp_F_init, sizeof(Exp_F_init) / sizeof(LancCommand));
  Serial.println("Starting exposure Gain Initialization");
  lancMacro(Exp_GAIN_init, sizeof(Exp_GAIN_init) / sizeof(LancCommand));
  Serial.println("Starting exposure S Initialization");
  lancMacro(Exp_S_init, sizeof(Exp_S_init) / sizeof(LancCommand));
  Serial.println("Starting white balance Initialization");
  lancMacro(WB_init, sizeof(WB_init) / sizeof(LancCommand));
  Serial.println("Setting default value for exposure F");
  lancMacro(Exp_F_default, sizeof(Exp_F_default) / sizeof(LancCommand));
  Serial.println("Setting default value for exposure Gain");
  lancMacro(Exp_GAIN_default, sizeof(Exp_GAIN_default) / sizeof(LancCommand));
  Serial.println("Setting default value for exposure S");
  lancMacro(Exp_S_default, sizeof(Exp_S_default) / sizeof(LancCommand));
  Serial.println("Setting default value for white balance");
  lancMacro(WB_default, sizeof(WB_default) / sizeof(LancCommand));
  Serial.println("Camera initialization complete.");
}

void setup() {
  camera_command = 1;
  Serial.begin(9600);
  delay(1500);

  pinMode(lancPin, INPUT);
  pinMode(cmdPin, OUTPUT);
  digitalWrite(cmdPin, LOW);

  pinMode(panEnablePin, OUTPUT);
  pinMode(panDirPin, OUTPUT);
  pinMode(panStepPin, OUTPUT);
  pinMode(tiltEnablePin, OUTPUT);
  pinMode(tiltDirPin, OUTPUT);
  pinMode(tiltStepPin, OUTPUT);
  digitalWrite(panEnablePin, HIGH);
  digitalWrite(tiltEnablePin, HIGH);

  // Connect to WiFi
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.setHostname("camera1");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("\nConnected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Display initialization message
  Serial.println("Initializing camera...");
  initializeCamera();

  // Start the server
  server.begin();
}

void loop() {
  reconnectWiFi(); // Check and reconnect to WiFi if disconnected
  WiFiClient client = server.available();
  if (client) {
    String currentLine = "";
    String request = "";
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        request += c;
        if (c == '\n') {
          if (currentLine.length() == 0) {
            if (request.indexOf("POST /command") >= 0) {
              handleCommand(client, request);
            } else if (request.indexOf("POST /camera_command") >= 0) {
              handleCameraCommand(client, request);
            } else if (request.indexOf("GET /status") >= 0) {
              handleStatus(client);
            } else {
              handleRoot(client);
            }
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }
    client.stop();
  }

  /******POLL FOR THE ARROWS BEING PRESSED******/
  /*******  UP ARROW **********/
  
  if (up_arrow && camera_command) { 
    if (camera_command >= ZOOM_1 && camera_command <= ZOOM_7) {
      //this relates to a zoom with a speed that runs from 1 (slowest) to 7(fastest)
      //Zoom in because the arrow up was pressed
      lancCommand(ZOOM_IN[camera_command-1]);
    } 
    else if (camera_command == FOCUS) {
      lancCommand(FOCUS_NEAR);
    }
    else if (camera_command == WB_K){
      //Issue the white balance macro to increase white balance kelvin
      lancMacro(WB_INC_K,sizeof(WB_INC_K) / sizeof(LancCommand));
      wb_k++;
    }
    else if (camera_command == EXP_F){
      //Issue the exposure macro to increase exposure F
      lancMacro(Exp_F_INC,sizeof(Exp_F_INC) / sizeof(LancCommand));
      exp_f++;
    }
    else if (camera_command == EXP_S){
      //Issue the exposure macro to increase exposure F
      lancMacro(Exp_S_INC,sizeof(Exp_S_INC) / sizeof(LancCommand));
      exp_s++;
    }
    else if (camera_command == EXP_GAIN){
      //Issue the exposure macro to increase exposure F
      lancMacro(Exp_GAIN_INC,sizeof(Exp_GAIN_INC) / sizeof(LancCommand));
      exp_g++;
    }
    else if (camera_command == PAN_TILT_SLOW){
      moveStepper(tiltEnablePin, tiltDirPin, tiltStepPin, true, 1); // Tilt down slow
    }
    else if (camera_command == PAN_TILT_MEDIUM){
      moveStepper(tiltEnablePin, tiltDirPin, tiltStepPin, true, 2); // Tilt down medium
    }
    else if (camera_command == PAN_TILT_FAST){
      moveStepper(tiltEnablePin, tiltDirPin, tiltStepPin, true, 3); // Tilt down fast
    }
    if(camera_command>8 && camera_command<13){
      up_arrow = false;
    }
  }

  /*******  DOWN ARROW **********/

  if(down_arrow && camera_command){
    if (camera_command >= ZOOM_1 && camera_command <= ZOOM_7) {
      //this relates to a zoom with a speed that runs from 1 (slowest) to 7(fastest)
      //Zoom out because the arrow down was pressed
      lancCommand(ZOOM_OUT[camera_command-1]);
    } 
    else if (camera_command == FOCUS) {
      lancCommand(FOCUS_FAR);
    }
    else if (camera_command == WB_K){
      //Issue the white balance macro to decrease white balance kelvin
      lancMacro(WB_DEC_K,sizeof(WB_DEC_K) / sizeof(LancCommand));
      wb_k--;
    }
    else if (camera_command == EXP_F){
      //Issue the exposure macro to decrease exposure F
      lancMacro(Exp_F_DEC,sizeof(Exp_F_DEC) / sizeof(LancCommand));
      exp_f--;
    }
    else if (camera_command == EXP_S){
      //Issue the exposure macro to decrease exposure F
      lancMacro(Exp_S_DEC,sizeof(Exp_S_DEC) / sizeof(LancCommand));
      exp_s--;
    }
    else if (camera_command == EXP_GAIN){
      //Issue the exposure macro to decrease exposure F
      lancMacro(Exp_GAIN_DEC,sizeof(Exp_GAIN_DEC) / sizeof(LancCommand));
      exp_g--;
    }
    else if (camera_command == PAN_TILT_SLOW){
      moveStepper(tiltEnablePin, tiltDirPin, tiltStepPin, false, 1); // Tilt down slow
    }
    else if (camera_command == PAN_TILT_MEDIUM){
      moveStepper(tiltEnablePin, tiltDirPin, tiltStepPin, false, 2); // Tilt down medium
    }
    else if (camera_command == PAN_TILT_FAST){
      moveStepper(tiltEnablePin, tiltDirPin, tiltStepPin, false, 3); // Tilt down fast
    }
    if(camera_command>8 && camera_command<13){
      down_arrow = false;
    }
  }

  /*******  RIGHT ARROW **********/
  
  if(right_arrow){
    if (camera_command == WB_K){
      //Issue the white balance macro to increase white balance kelvin
      lancMacro(WB_INC_K,sizeof(WB_INC_K) / sizeof(LancCommand));
      wb_k++;
    }
    else if (camera_command == EXP_F){
      //Issue the exposure macro to increase exposure F
      lancMacro(Exp_F_INC,sizeof(Exp_F_INC) / sizeof(LancCommand));
      exp_f++;
    }
    else if (camera_command == EXP_S){
      //Issue the exposure macro to increase exposure F
      lancMacro(Exp_S_INC,sizeof(Exp_S_INC) / sizeof(LancCommand));
      exp_s++;
    }
    else if (camera_command == EXP_GAIN){
      //Issue the exposure macro to increase exposure F
      lancMacro(Exp_GAIN_INC,sizeof(Exp_GAIN_INC) / sizeof(LancCommand));
      exp_g++;
    }
    else if(camera_command == PAN_TILT_SLOW){
      //Pan the camera
      moveStepper(panEnablePin, panDirPin, panStepPin, false, 1); // Pan right
    }
    else if(camera_command == PAN_TILT_MEDIUM){
      //Pan the camera
      moveStepper(panEnablePin, panDirPin, panStepPin, false, 2); // Pan right
    }
    else if(camera_command == PAN_TILT_FAST){
      //Pan the camera
      moveStepper(panEnablePin, panDirPin, panStepPin, false, 3); // Pan right
    }
    if(camera_command>8 && camera_command<13){
      right_arrow = false;
    }
  }

  /*******  LEFT ARROW **********/
    
  if(left_arrow){
    if (camera_command == WB_K){
      //Issue the white balance macro to decrease white balance kelvin
      lancMacro(WB_DEC_K,sizeof(WB_DEC_K) / sizeof(LancCommand));
      wb_k--;
    }
    else if (camera_command == EXP_F){
      //Issue the exposure macro to decrease exposure F
      lancMacro(Exp_F_DEC,sizeof(Exp_F_DEC) / sizeof(LancCommand));
      exp_f--;
    }
    else if (camera_command == EXP_S){
      //Issue the exposure macro to decrease exposure F
      lancMacro(Exp_S_DEC,sizeof(Exp_S_DEC) / sizeof(LancCommand));
      exp_s--;
    }
    else if (camera_command == EXP_GAIN){
      //Issue the exposure macro to decrease exposure F
      lancMacro(Exp_GAIN_DEC,sizeof(Exp_GAIN_DEC) / sizeof(LancCommand));
      exp_g--;
    }
    else if(camera_command == PAN_TILT_SLOW){
      //Pan the camera
      moveStepper(panEnablePin, panDirPin, panStepPin, true, 1); // Pan left slow
    }
    else if(camera_command == PAN_TILT_MEDIUM){
      //Pan the camera
      moveStepper(panEnablePin, panDirPin, panStepPin, true, 2); // Pan left medium
    }
    else if(camera_command == PAN_TILT_FAST){
      //Pan the camera
      moveStepper(panEnablePin, panDirPin, panStepPin, true, 3); // Pan left fast
    }
    if(camera_command>8 && camera_command<13){
      left_arrow = false;
    }
  }

  /*******  OTHER STUFF TO DO IN VOID LOOP **********/
  

  if (millis()-lastpan >= motor_timeout && !timeout_flag){
    //Disable the pan stepper motor. 
    digitalWrite(panEnablePin, 1);
    Serial.println("Stepper has been disabled");
    timeout_flag = 1;
  }
  //delay(200);
 
}


